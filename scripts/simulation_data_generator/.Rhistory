if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
names(row_index) = c("mean","SD","skewness")
result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#result = rbind(raw_target[i,"A"],raw_target[i,"B"],raw_target[i,"C"],raw_target[i,"D"])
#result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#mu = raw_target[i, "mu"]
#sd = raw_target[i, "sd"]
#sk = raw_target[i, "sk"]
#result = cbind(result,mu,sd,sk)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agents_from_human/human",raw_target[i,"subj"],"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
print(df)
i=i+1
}
}
library(dplyr)
library(e1071)
#raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
#raw_target = subset(raw_target,select=-c(X))
#A = round(raw_target$A*23/9,0)
#B =round(raw_target$B*23/9,0)
#C =round(raw_target$C*23/9,0)
#D =round(raw_target$D*23/9,0)
#raw_target = cbind(raw_target["subj"],A,B,C,D)
#raw_target_score = subset(raw_target,select=c(A,B,C,D))
#raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
list_mu = seq(5,20,length.out = 4)
list_sd = seq(0.1,2.1,length.out = 3)
list_sk = seq(-1,1,length.out = 3)
df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
names(df) = c("mu","sd","sk")
n_agent = 3
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
candidate = runif(n = n_target,min = 0,max = 26)
cand_mean = round(mean(candidate),0)
cand_sd = round(sd(candidate),1)
cand_sk = round(skewness(candidate),0)
if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
names(row_index) = c("mean","SD","skewness")
result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#result = rbind(raw_target[i,"A"],raw_target[i,"B"],raw_target[i,"C"],raw_target[i,"D"])
#result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#mu = raw_target[i, "mu"]
#sd = raw_target[i, "sd"]
#sk = raw_target[i, "sk"]
#result = cbind(result,mu,sd,sk)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/S",sprintf("%03d",i+3),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
print(df)
i=i+1
}
}
library(dplyr)
library(e1071)
#raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
#raw_target = subset(raw_target,select=-c(X))
#A = round(raw_target$A*23/9,0)
#B =round(raw_target$B*23/9,0)
#C =round(raw_target$C*23/9,0)
#D =round(raw_target$D*23/9,0)
#raw_target = cbind(raw_target["subj"],A,B,C,D)
#raw_target_score = subset(raw_target,select=c(A,B,C,D))
#raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
list_mu = seq(5,20,length.out = 4)
list_sd = seq(0.1,2.1,length.out = 3)
list_sk = seq(-1,1,length.out = 3)
df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
names(df) = c("mu","sd","sk")
n_agent = 3
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
candidate = runif(n = n_target,min = 0,max = 26)
cand_mean = round(mean(candidate),0)
cand_sd = round(sd(candidate),1)
cand_sk = round(skewness(candidate),0)
if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
names(row_index) = c("mean","SD","skewness")
result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#result = rbind(raw_target[i,"A"],raw_target[i,"B"],raw_target[i,"C"],raw_target[i,"D"])
#result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#mu = raw_target[i, "mu"]
#sd = raw_target[i, "sd"]
#sk = raw_target[i, "sk"]
#result = cbind(result,mu,sd,sk)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/S",sprintf("%03d",i+3),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
}
}
filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/ungenerate_combinations"
write.csv(df,filenamedf)
filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/ungenerate_combinations.csv"
write.csv(df,filenamedf)
a=runif(4,3,8)
a
library(dplyr)
library(e1071)
#raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
#raw_target = subset(raw_target,select=-c(X))
#A = round(raw_target$A*23/9,0)
#B =round(raw_target$B*23/9,0)
#C =round(raw_target$C*23/9,0)
#D =round(raw_target$D*23/9,0)
#raw_target = cbind(raw_target["subj"],A,B,C,D)
#raw_target_score = subset(raw_target,select=c(A,B,C,D))
#raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
list_mu = seq(5,20,length.out = 4)
list_sd = seq(0.1,2.1,length.out = 3)
list_sk = seq(-1,1,length.out = 3)
df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
names(df) = c("mu","sd","sk")
n_agent = 3
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
candidate = runif(n = n_target,min = 0,max = 26)
cand_mean = round(mean(candidate),0)
cand_sd = round(sd(candidate),1)
cand_sk = round(skewness(candidate),0)
if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
names(row_index) = c("mean","SD","skewness")
result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#result = rbind(raw_target[i,"A"],raw_target[i,"B"],raw_target[i,"C"],raw_target[i,"D"])
#result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#mu = raw_target[i, "mu"]
#sd = raw_target[i, "sd"]
#sk = raw_target[i, "sk"]
result = cbind(result,row_index)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/S",sprintf("%03d",i+3),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
}
}
filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/ungenerate_combinations.csv"
write.csv(df,filenamedf)
library(dplyr)
library(e1071)
#raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
#raw_target = subset(raw_target,select=-c(X))
#A = round(raw_target$A*23/9,0)
#B =round(raw_target$B*23/9,0)
#C =round(raw_target$C*23/9,0)
#D =round(raw_target$D*23/9,0)
#raw_target = cbind(raw_target["subj"],A,B,C,D)
#raw_target_score = subset(raw_target,select=c(A,B,C,D))
#raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
list_mu = seq(5,20,length.out = 4)
list_sd = seq(0.1,2.1,length.out = 3)
list_sk = seq(-1,1,length.out = 3)
df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
names(df) = c("mu","sd","sk")
n_agent = 36
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
candidate = runif(n = n_target,min = 0,max = 26)
cand_mean = round(mean(candidate),0)
cand_sd = round(sd(candidate),1)
cand_sk = round(skewness(candidate),0)
if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
names(row_index) = c("mean","SD","skewness")
result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#result = rbind(raw_target[i,"A"],raw_target[i,"B"],raw_target[i,"C"],raw_target[i,"D"])
#result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#mu = raw_target[i, "mu"]
#sd = raw_target[i, "sd"]
#sk = raw_target[i, "sk"]
result = cbind(result,row_index)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/S",sprintf("%03d",i+3),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
}
}
filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/ungenerate_combinations.csv"
write.csv(df,filenamedf)
df
library(dplyr)
library(e1071)
#raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
#raw_target = subset(raw_target,select=-c(X))
#A = round(raw_target$A*23/9,0)
#B =round(raw_target$B*23/9,0)
#C =round(raw_target$C*23/9,0)
#D =round(raw_target$D*23/9,0)
#raw_target = cbind(raw_target["subj"],A,B,C,D)
#raw_target_score = subset(raw_target,select=c(A,B,C,D))
#raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
list_mu = seq(5,20,length.out = 4)
list_sd = seq(0.1,2.1,length.out = 3)
list_sk = seq(-1,1,length.out = 3)
df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
names(df) = c("mu","sd","sk")
n_agent = 36
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
candidate = runif(n = n_target,min = 0,max = 26)
cand_mean = round(mean(candidate),0)
cand_sd = round(sd(candidate),1)
cand_sk = round(skewness(candidate),0)
if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
names(row_index) = c("mean","SD","skewness")
result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#result = rbind(raw_target[i,"A"],raw_target[i,"B"],raw_target[i,"C"],raw_target[i,"D"])
#result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#mu = raw_target[i, "mu"]
#sd = raw_target[i, "sd"]
#sk = raw_target[i, "sk"]
result = cbind(result,row_index)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/S",sprintf("%03d",i+3),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
}
}
filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/34agents/ungenerate_combinations.csv"
write.csv(df,filenamedf)
library(dplyr)
library(e1071)
#raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
#raw_target = subset(raw_target,select=-c(X))
#A = round(raw_target$A*23/9,0)
#B =round(raw_target$B*23/9,0)
#C =round(raw_target$C*23/9,0)
#D =round(raw_target$D*23/9,0)
#raw_target = cbind(raw_target["subj"],A,B,C,D)
#raw_target_score = subset(raw_target,select=c(A,B,C,D))
#raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
list_mu = seq(5,20,length.out = 4)
list_sd = seq(0.1,2.1,length.out = 3)
list_sk = seq(-1,1,length.out = 3)
df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
names(df) = c("mu","sd","sk")
n_agent = 36
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
candidate = runif(n = n_target,min = 0,max = 26)
cand_mean = round(mean(candidate),0)
cand_sd = round(sd(candidate),1)
cand_sk = round(skewness(candidate),0)
if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
names(row_index) = c("mean","SD","skewness")
result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#result = rbind(raw_target[i,"A"],raw_target[i,"B"],raw_target[i,"C"],raw_target[i,"D"])
#result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
#mu = raw_target[i, "mu"]
#sd = raw_target[i, "sd"]
#sk = raw_target[i, "sk"]
result = cbind(result,row_index)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/36agents/S",sprintf("%03d",i+3),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
}
}
filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/36agents/ungenerate_combinations.csv"
write.csv(df,filenamedf)
library(dplyr)
library(e1071)
raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
raw_target = subset(raw_target,select=-c(X))
A = round(raw_target$A*23/9,0)
B = round(raw_target$B*23/9,0)
C = round(raw_target$C*23/9,0)
D = round(raw_target$D*23/9,0)
raw_target = cbind(raw_target["subj"],A,B,C,D)
raw_target_score = subset(raw_target,select=c(A,B,C,D))
raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
#list_mu = seq(5,20,length.out = 4)
#list_sd = seq(0.1,2.1,length.out = 3)
#list_sk = seq(-1,1,length.out = 3)
#df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
#names(df) = c("mu","sd","sk")
n_agent = 1
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
#candidate = runif(n = n_target,min = 0,max = 26)
#cand_mean = round(mean(candidate),0)
#cand_sd = round(sd(candidate),1)
#cand_sk = round(skewness(candidate),0)
#if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
#row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
#names(row_index) = c("mean","SD","skewness")
#result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
result = rbind(raw_target[i+68,"A"],raw_target[i+68,"B"],raw_target[i+68,"C"],raw_target[i+68,"D"])
result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
mu = raw_target[i+68, "mu"]
sd = raw_target[i+68, "sd"]
sk = raw_target[i+68, "sk"]
result = cbind(result,row_index)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/36agents/humanS",sprintf("%03d",i+68),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
#}
}
#filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/36agents/ungenerate_combinations.csv"
#write.csv(df,filenamedf)
library(dplyr)
library(e1071)
raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
raw_target = subset(raw_target,select=-c(X))
A = round(raw_target$A*23/9,0)
B = round(raw_target$B*23/9,0)
C = round(raw_target$C*23/9,0)
D = round(raw_target$D*23/9,0)
raw_target = cbind(raw_target["subj"],A,B,C,D)
raw_target_score = subset(raw_target,select=c(A,B,C,D))
raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw.csv", header = TRUE)
library(dplyr)
library(e1071)
raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw_1.csv", header = TRUE)
View(raw_target)
View(raw_target)
raw_target = subset(raw_target,select=-c(X))
A = round(raw_target$A*23/9,0)
B = round(raw_target$B*23/9,0)
C = round(raw_target$C*23/9,0)
D = round(raw_target$D*23/9,0)
raw_target = cbind(raw_target["subj"],A,B,C,D)
raw_target_score = subset(raw_target,select=c(A,B,C,D))
raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
n_agent = 1
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
#candidate = runif(n = n_target,min = 0,max = 26)
#cand_mean = round(mean(candidate),0)
#cand_sd = round(sd(candidate),1)
#cand_sk = round(skewness(candidate),0)
#if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
#row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
#names(row_index) = c("mean","SD","skewness")
#result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
result = rbind(raw_target[i+27,"A"],raw_target[i+27,"B"],raw_target[i+27,"C"],raw_target[i+27,"D"])
result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
mu = raw_target[i+27, "mu"]
sd = raw_target[i+27, "sd"]
sk = raw_target[i+27, "sk"]
result = cbind(result,row_index)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/humanS",sprintf("%03d",i+68),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
#}
}
#filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/36agents/ungenerate_combinations.csv"
#write.csv(df,filenamedf)
library(dplyr)
library(e1071)
raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw_1.csv", header = TRUE)
raw_target = subset(raw_target,select=-c(X))
A = round(raw_target$A*23/9,0)
B = round(raw_target$B*23/9,0)
C = round(raw_target$C*23/9,0)
D = round(raw_target$D*23/9,0)
raw_target = cbind(raw_target["subj"],A,B,C,D)
raw_target_score = subset(raw_target,select=c(A,B,C,D))
raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
#list_mu = seq(5,20,length.out = 4)
#list_sd = seq(0.1,2.1,length.out = 3)
#list_sk = seq(-1,1,length.out = 3)
#df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
#names(df) = c("mu","sd","sk")
n_agent = 1
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
#candidate = runif(n = n_target,min = 0,max = 26)
#cand_mean = round(mean(candidate),0)
#cand_sd = round(sd(candidate),1)
#cand_sk = round(skewness(candidate),0)
#if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
#row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
#names(row_index) = c("mean","SD","skewness")
#result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
result = rbind(raw_target[i+27,"A"],raw_target[i+27,"B"],raw_target[i+27,"C"],raw_target[i+27,"D"])
result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
mu = raw_target[i+27, "mu"]
sd = raw_target[i+27, "sd"]
sk = raw_target[i+27, "sk"]
result = cbind(result,mu,sd,sk)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/humanS",sprintf("%03d",i+68),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
#}
}
#filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/36agents/ungenerate_combinations.csv"
#write.csv(df,filenamedf)
library(dplyr)
library(e1071)
raw_target = read.csv(file = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/agent_raw_1.csv", header = TRUE)
raw_target = subset(raw_target,select=-c(X))
A = round(raw_target$A*23/9,0)
B = round(raw_target$B*23/9,0)
C = round(raw_target$C*23/9,0)
D = round(raw_target$D*23/9,0)
raw_target = cbind(raw_target["subj"],A,B,C,D)
raw_target_score = subset(raw_target,select=c(A,B,C,D))
raw_target = cbind(raw_target,mu = apply(raw_target_score,1,mean),sd = apply(raw_target_score,1,sd),sk = apply(raw_target_score,1,skewness))
#list_mu = seq(5,20,length.out = 4)
#list_sd = seq(0.1,2.1,length.out = 3)
#list_sk = seq(-1,1,length.out = 3)
#df = as.data.frame(expand.grid(list_mu,list_sd,list_sk))
#names(df) = c("mu","sd","sk")
n_agent = 1
n_target = 4
#NON-LINEAR
#y=function(x) {-x*log2(x)}
#MAX_S_R = optimise(y, c(0,1),maximum = TRUE)[["objective"]]
i = 1
while(i<=n_agent){
# create a new set and see if it satisfies
#candidate = runif(n = n_target,min = 0,max = 26)
#cand_mean = round(mean(candidate),0)
#cand_sd = round(sd(candidate),1)
#cand_sk = round(skewness(candidate),0)
#if(nrow(subset(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk))>0){
#save candidate
#row_index = subset.data.frame(df,mu == cand_mean & sd == cand_sd  & sk == cand_sk)
#names(row_index) = c("mean","SD","skewness")
#result = as.data.frame(candidate,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
result = rbind(raw_target[i+26,"A"],raw_target[i+26,"B"],raw_target[i+26,"C"],raw_target[i+26,"D"])
result = as.data.frame(result,row.names = c("subj's family1","subj's family2","subj's family3","subj's family4"))
mu = raw_target[i+26, "mu"]
sd = raw_target[i+26, "sd"]
sk = raw_target[i+26, "sk"]
result = cbind(result,mu,sd,sk)
filename = as.character(paste0("/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/humanS",sprintf("%03d",i+68),"b.csv"))
write.csv(result,filename,row.names = TRUE)
# update the data frame
#df = subset(df,mu != cand_mean | sd != cand_sd  | sk != cand_sk)
i=i+1
#}
}
#filenamedf = "/Users/elaine/Desktop/TOMNET/tomnet-project/scripts/simulation_data_generator/36agents/ungenerate_combinations.csv"
#write.csv(df,filenamedf)
